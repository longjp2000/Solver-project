c$Id: pmatin.f,v 1.1 2006/11/20 20:32:37 rlt Exp $
      subroutine pmatin(tx,d,ul,xl,tl,s,p,idl,ie,iedof,lie,prt,prth)

c      * * F E A P * * A Finite Element Analysis Program

c....  Copyright (c) 1984-2006: Regents of the University of California
c                               All rights reserved

c-----[--.----+----.----+----.-----------------------------------------]
c     Modification log                                Date (dd/mm/year)
c       Original version                                    01/11/2006
c-----[--.----+----.----+----.-----------------------------------------]
c      Purpose: Data input routine for material parameters

c      Inputs:
c         tx          - Option identifier
c         prt         - Flag, print input data if true
c         prth        - Flag, print title/header if true

c      Scratch:
c         ul(*)       - Local nodal solution vector
c         xl(*)       - Local nodal coordinate vector
c         tl(*)       - Local nodal temperature vector
c         s(*)        - Element array
c         p(*)        - Element vector
c         idl(*)      - Local degree of freedom integer data
c         lie(ndf,*)  - Local dof assignment array

c      Outputs:
c         ie(nie,*)   - Element descriptor data
c         iedof(*,*,*) - Element nodal assembly data
c         d(ndd,*)    - Material parameters generated by elements
c-----[--.----+----.----+----.-----------------------------------------]
      implicit  none

      include  'cdata.h'
      include  'cdat1.h'
      include  'chdata.h'
      include  'comfil.h'
      include  'eldata.h'
      include  'erotas.h'
      include  'hdata.h'
      include  'iofile.h'
      include  'iodata.h'
      include  'iosave.h'
      include  'pdata3.h'
      include  'rigid1.h'
      include  'rigid2.h'
      include  'strnum.h'
      include  'sdata.h'

      logical   pcomp,pinput,tinput,vinput,errck,prt,prth,doflg
      character tx(2)*15,mtype*69,etype*20
      integer   i,j, ii,il,is, ie(nie,*),iedof(ndf,nen,*),idl(*)
      integer   lie(ndf,*)
      real*8    d(ndd,*),ul(*),xl(*),tl(*),s(*),p(*), td(50)

      save

c     Data input for material set ma

      errck = vinput(yyy(16:30),15,td,1)
      ma    = nint(td(1))
      if(nummat.eq.1) ma = max(1,ma)
      if(ma.le.0 .or. ma.gt.nummat) then
        if(ior.gt.0) then
          write(iow,3000) ma
          write(ilg,3000) ma
          call plstop()
        else
          write(*,3000) ma,' Reinput mate,ma'
        endif
        return
      endif

      if(prt) then
        call prtitl(prth)
        write(iow,2000)
      endif

c     Set material identifier

      do j = 3,80
        if(xxx(j:j).eq.' ' .or. xxx(j:j).eq.',') then
          do i = j+1,80
            if(xxx(i:i).eq.' ' .or. xxx(i:i).eq.',') go to 300
          end do ! i
        endif
      end do ! j
      i = 69
300   mtype = xxx(i+1:70)

c     Input record for element type selection

301   if(ior.lt.0) then
        write(*,2004)
        call pprint('   >')
      endif
      il = min(ndf+2,15)
      errck = tinput(tx,1,td,il)
      if(errck) go to 301
c     Set flag to save material properties

      inquire(file=fmtl, opened = errck)
      if(errck) then
        lmate = .true.
      else
        lmate = .false.
      endif

c     Set material type for standard elements

      iel = nint(td(1))
      if(.not.pcomp(tx,'user',4)) then
        call pelnum(tx,iel,errck)
      endif

      if(ie(nie-1,ma).ne.0 .and. iel.eq.0) then
        iel = ie(nie-1,ma)
      else
        ie(nie-2,ma) = nint(td(2))
        if(ie(nie-2,ma).le.0) ie(nie-2,ma) = ma
      endif

c     Set print head

      if(ma.eq.ie(nie-2,ma)) then
        etype = ' '
      else
        write(etype,'(a16,i4)') 'Element Material',ie(nie-2,ma)
      endif

      do j = 1,min(ndf,13)
        idl(j) = nint(td(j+2))
      end do ! j

      if(ndf.gt.13) then
        do ii = 1,(ndf+2)/16
          is = il+1
          il = min(is+15,ndf+2)
302       errck = pinput(td,il-is+1)
          if(errck) go to 302
          do j = 1,il-is+1
            idl(j+is-3) = nint(td(j))
          end do ! j
        end do ! ii
      endif

c     Check to see if degree of freedoms to be reassigned

      do i = 1,ndf
        if(idl(i).ne.0) go to 303
      end do ! i

c     Reset all zero inputs

      do i = 1,ndf
        idl(i) = i
      end do ! i

303   ie(nie-1,ma) = iel

c     Set flags for number of history and stress terms

      mct  = 0
      nh1  = 0
      nh2  = 0
      nh3  = 0
      nlm  = 0
      istv = 0
      istp = 0

c     Output information

      if(prt) then
        if(iel.gt.0) then
          write(iow,2001) ma,iel,etype,(j,idl(j),j=1,ndf)
        else
          write(iow,2002) ma,tx(1)(1:5),etype,(j,idl(j),j=1,ndf)
        endif
        write(iow,2003) mtype
      else
        if(iel.gt.0) then
          write(iow,2001) ma,iel,etype
        else
          write(iow,2002) ma,tx(1)(1:5),etype
        endif
        write(iow,2003) mtype
      endif

c     Save material sets to file for some later uses

      if(lmate) then
        write(iwd,2005) ma
        if(iel.gt.0) then
          write(iwd,2006) 'user ', iel,(nint(td(j)),j=1,ndf+2)
        else
          write(iwd,2006) tx(1)(1:5),0,(nint(td(j)),j=1,ndf+2)
        endif
      endif

c     Obtain inputs from element routine

      do j = 1,nen+1
        do i = 1,ndf
          lie(i,j) = i
        end do ! i
      end do ! j
      rotyp = 0

c     Set default element plot type to mesh dimension

      pstyp = ndm

c     Get material input data element library (isw = 1)

      call elmlib(d(1,ma),ul,xl,lie,tl,s,p,ndf,ndm,nst,iel,1)

c     Check if dof values set by each node

      doflg = .false.    ! Check if mixed conditions exist
      do i = 1,ndf
        do j = 1,nen
          if(lie(i,j+1).eq.0) then
            doflg = .true.
          endif
        end do ! j
      end do ! i

c     Set assembly information

      if(doflg) then
        do i = 1,ndf
          do j = 1,nen
            if(lie(i,j+1).gt.0) then
              iedof(i,j,ma) = idl(i)
            else
              iedof(i,j,ma) = 0
            endif
          end do ! j
        end do ! i
      else
        do i = 1,ndf
          if(lie(i,1).gt.0) then
            do j = 1,nen
              iedof(i,j,ma) = idl(i)
            end do ! j
          else
            do j = 1,nen
              iedof(i,j,ma) = 0
            end do ! j
          endif
        end do ! i
      endif

c     Set element plot shape type (can be reset by element library)

      ie(1,ma) = pstyp

c     Set element rigid body option

      if(nrmatl.gt.0) then
        ie(2,ma)       = nrmatl
        nrbody         = max(nrbody,nrmatl)
        rbtype(nrmatl) = 0
        rbcen(nrmatl)  = 0
      endif

c     Set number of history terms

      if(nh1.ne.0) then
        ie(nie,ma) = nh1
      else
        ie(nie,ma) = mct
      endif
      ie(nie-5,ma) = nh3
      if(nlm.gt.0) then
        ie(nie-8,ma) = nlm
        nadd         = max(nadd,nlm)
      endif
      npstr = max(npstr,istv)

c     Set rotational update type

      if(rotyp.ne.0) then
        ie(nie-6,ma) = rotyp
      endif
      lmate = .false.

c     Formats

2000  format('   M a t e r i a l    P r o p e r t i e s')

2001  format(/5x,'Material  Number',i4,' for User Element Type',i3,5x,/
     &        5x,a,/:/
     &        5x,'Degree of Freedom Assignments    Local    Global'/
     &       37x,'Number',4x,'Number'/(31x,2i10))

2002  format(/5x,'Material  Number',i4,' for Element Type: ',a,5x,/
     &        5x,a,/:/
     &        5x,'Degree of Freedom Assignments    Local    Global'/
     &       37x,'Number',4x,'Number'/(31x,2i10))

2003  format(5x,a)

2004  format(' Input: Elmt type, Id No., dof set')

2005  format('MATErial',i8)
2006  format(2x,a5,15i4)

3000  format(' *ERROR* PMATIN: Illegal material number: ma=',i5:,a)

      end
